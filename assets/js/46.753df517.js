(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{428:function(t,e,s){"use strict";s.r(e);var a=s(18),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"configure-a-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-a-node"}},[t._v("#")]),t._v(" Configure a node")]),t._v(" "),s("p",[t._v("IPFS is configured through a json formatted text file, located by default at "),s("code",[t._v("~/.ipfs/config")]),t._v(". Implementation-specific information can be found within the "),s("a",{attrs:{href:"https://github.com/ipfs/go-ipfs/blob/master/docs/config.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("go-ipfs"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"https://github.com/ipfs/js-ipfs/blob/master/docs/config.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-ipfs"),s("OutboundLink")],1),t._v(" repositories.")]),t._v(" "),s("h2",{attrs:{id:"addresses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addresses"}},[t._v("#")]),t._v(" Addresses")]),t._v(" "),s("p",[t._v("The config file stores a few different address types, all of which use the multiaddr addressing format. Let's go over what each address type means.")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Addresses"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Swarm"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/0.0.0.0/tcp/4001"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"API"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/5001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Gateway"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ip4/127.0.0.1/tcp/8080"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"swarm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swarm"}},[t._v("#")]),t._v(" Swarm")]),t._v(" "),s("p",[t._v("Swarm addresses are addresses that the local daemon will listen on for connections from other IPFS peers. You should try to ensure that these addresses can be dialed from a separate computer and that there are no firewalls blocking the ports you specify.")]),t._v(" "),s("h3",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),s("p",[t._v("The API address is the address that the daemon will serve the http API from. This API is used to control the daemon through the command line, or simply via curl if you're feeling adventurous. You should ensure that this address is not dialable from outside of your machine, or other potentially malicious parties may be able to send commands to your IPFS daemon.")]),t._v(" "),s("h3",{attrs:{id:"gateway"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[t._v("#")]),t._v(" Gateway")]),t._v(" "),s("p",[t._v("The Gateway address is the address that the daemon will serve the gateway interface from. The gateway may be used to view files through IPFS, and serve static web content. This port may or may not be dialable from outside of your machine; that's entirely up to you. The gateway address is optional; if you leave it blank, the gateway server will not start.")]),t._v(" "),s("h2",{attrs:{id:"mounts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mounts"}},[t._v("#")]),t._v(" Mounts")]),t._v(" "),s("p",[t._v("The mounts config values specifies the default mount points for the IPFS and ipns virtual file systems, if no other directories are specified by the "),s("code",[t._v("ipfs mount")]),t._v(" command. These folders should exist, and have permissions for your user to be able to mount to them via fuse.")]),t._v(" "),s("h2",{attrs:{id:"bootstrap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap"}},[t._v("#")]),t._v(" Bootstrap")]),t._v(" "),s("p",[t._v("The Bootstrap config array specifies the list of IPFS peers that your daemon will connect to on startup. The default values for this are the 'ipfs solarnet' nodes, which are a set of VPS servers distributed around the country.")])])}),[],!1,null,null,null);e.default=r.exports}}]);